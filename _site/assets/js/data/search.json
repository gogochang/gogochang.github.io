[
  
  {
    "title": "[백준 11054][swift] 가장 긴 바이토닉 부분 수열",
    "url": "/posts/%EB%B0%B1%EC%A4%80-11054-Swift-%EA%B0%80%EC%9E%A5-%EA%B8%B4-%EB%B0%94%EC%9D%B4%ED%86%A0%EB%8B%89-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4/",
    "categories": "",
    "tags": "",
    "date": "2024-10-16 00:00:00 +0900",
    





    
    "snippet": "  백준 1932번: 가장 긴 바이토닉 부분 수열  문제    수열 S가 주어졌을 때, 그 수열의 부분 수열 중에서 바이토닉 부분 수열이면서 가장 긴 것을 구하는 프로그램을 작성하시오.  바이토닉 수열이란, 수열이 다음과 같은 조건을 만족하는 경우이다.      S1 &lt; S2 &lt; … &lt; Sk &gt; Sk+1 &gt; … &gt; Sn...",
    "content": "  백준 1932번: 가장 긴 바이토닉 부분 수열  문제    수열 S가 주어졌을 때, 그 수열의 부분 수열 중에서 바이토닉 부분 수열이면서 가장 긴 것을 구하는 프로그램을 작성하시오.  바이토닉 수열이란, 수열이 다음과 같은 조건을 만족하는 경우이다.      S1 &lt; S2 &lt; … &lt; Sk &gt; Sk+1 &gt; … &gt; Sn (1 ≤ k ≤ n, k는 수열의 임의의 위치)    즉, 처음에는 오름차순으로 증가하고, 그 후에는 내림차순으로 감소하는 수열을 말한다.  입력    첫째 줄에 수열 A의 크기 N이 주어진다. (1 ≤ N ≤ 1,000)  둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)  출력    첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 부분 수열의 길이를 출력한다.접근방법      DP(Dynamic Programming, 동적 계획법)수열을 저장하면서 현재 값을 구하기 위해 이전에 이미 계산된 데이터를 재사용하기 때문에 DP가 사용된다.        바이토닉 수열이 문제를 풀기 앞서, 바이토닉 수열이 무엇인지 이해하는것이 중요하다.바이토닉 수열이란 한 지점을 기준으로 오름차순으로 증가하다가 다시 내림차순으로 감소하는 수열이다.        증가수열(LIS)증가하는 수열은 한 지점의 기준으로 왼쪽에 존재해야한다.        감소수열(LDS) 감소하는 수열은 한 지점의 기준으로 오른쪽에 존재해야한다.        증가수열(LIS)과 감소수열(LDS)의 분리바이토닉 수열의 증가 -&gt; 감소 형태인 문제를 코드로 구현하기 위해 한 지점을 기준으로 왼쪽에서 증가하는 증가수열(LIS)과 오른쪽에서 감소하는 감소수열(LDS) 두 값을 구해 특정 지점의 최장 바이토닉 부분 수열을 구한다.  코드let n = Int(readLine()!)! // 수열의 길이let arr = readLine()!.split(separator: \" \").map { Int($0)! } // 수열 Avar lis = Array(repeating: 1, count: n) // 증가하는 부분 수열(LIS)var lds = Array(repeating: 1, count: n) // 감소하는 부분 수열(LDS)// 1. LIS 계산 (왼쪽에서 오른쪽으로)for i in 0..&lt;n {    for j in 0..&lt;i {        if arr[j] &lt; arr[i] {            lis[i] = max(lis[i], lis[j]+1)        }    }}// 2. LDS 계산 (오른쪽에서 왼쪽으로)for i in (0..&lt;n).reversed() {    for j in (i+1)..&lt;n {        if arr[i] &gt; arr[j] {            lds[i] = max(lds[i], lds[j]+1)        }    }}// 3. LIS와 LDS를 더한 값에서 종복된 기준점 1개를 제외한 값 계산var maxLength = 0for i in 0..&lt;n {    maxLength = max(maxLength, lis[i] + lds[i] - 1)}print(maxLength)코드설명이 코드는 주어진 수열에서 가장 긴 바이토닉 부분 수열을 찾는 문제를 해결한다. 이를 위해 증가하는 부분 수열(LIS)과 감소하는 부분 수열(LDS)을 각각 구한 후, 두 값을 결합해 가장 긴 바이토닉 부분 수열의 길이를 계산한다.  LIS 계산 (왼쪽에서 오른쪽으로)          lis배열은 각 원소에서 끝나는 최장 증가 부분 수열의 길이를 저장한다.      현재 값이 앞의 값보다 크다면, 이전 값에 현재 값을 추가하여 수열을 확장할 수 있다.      관련 알고리즘 : LIS 알고리즘        LDS 계산 (오른쪽에서 왼쪽으로)          lds배열은 각 원소에서 시작하는 최장 감소 부분 수열의 길이를 저장한다.      현재 값이 뒤의 값보다 크다면, 이후 값에 현재 값을 추가하여 수열을 확장할 수 있다.      reversed()를 통해 수열을 끝(오른쪽)부터 저장할 수 있다.      관련 알고리즘 : LDS 알고리즘        LIS와 LDS를 더한 값에서 종복된 기준점 1개를 제외한 값 계산          한 지점에서 LIS와 LDS를 합치면 해당 지점의 바이토닉 수열의 길이를 구할 수 있다.  lis와 lds의 구하고자하는 지점에는 서로 길이를 하나씩 가지고 있기 때문에 중복된 기준점을 제거하기 위해 1을 빼준다.      모든 지점에서의 바이토닉 수열의 길이 중 가장 큰 값을 구한다.      마무리처음에는 바이토닉 수열이라는 개념이 좀 낯설었다.증가 수열과 감소 수열이 하나의 흐름으로 이어진다고만 생각하고 접근했었는데,문제를 분석하면서 증가수열(LIS)과 감소수열(LDS)을 각각 따로 계산하는 방식이 이 문제의 핵심이었다.큰 문제를 더 작은 단위로 나누어 분석하고 해결하는 방법 기억하자."
  },
  
  {
    "title": "컴퓨터구조 컴퓨터의기본구조",
    "url": "/posts/%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B5%AC%EC%A1%B0-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%A1%B0/",
    "categories": "",
    "tags": "",
    "date": "2024-07-22 00:00:00 +0900",
    





    
    "snippet": "컴퓨터 구조를 이해하는 것은 컴퓨터 과학의 기초 중 하나입니다. 이 글에서는 컴퓨터의 주요 구성 요소와 각 부분이 어떻게 협력하여 우리가 사용하는 다양한 기능과 작업을 수행하는지 설명하려고 합니다.컴퓨터 기본 구조컴퓨터의 기본 구조를 그림으로 간단하게 그려보았습니다.  1. 중앙 처리 장치 (CPU)  모든 산술, 논리 연산 담당  명령어 처리 및 실...",
    "content": "컴퓨터 구조를 이해하는 것은 컴퓨터 과학의 기초 중 하나입니다. 이 글에서는 컴퓨터의 주요 구성 요소와 각 부분이 어떻게 협력하여 우리가 사용하는 다양한 기능과 작업을 수행하는지 설명하려고 합니다.컴퓨터 기본 구조컴퓨터의 기본 구조를 그림으로 간단하게 그려보았습니다.  1. 중앙 처리 장치 (CPU)  모든 산술, 논리 연산 담당  명령어 처리 및 실행  컴퓨터의 속도와 성능에 직접적 영향컴퓨터 구조의 중심에는 중앙 처리 장치 (CPU)가 자리잡고 있습니다. CPU는 모든 연산과 데이터 처리 작업을 수행하는 핵심 구성 요소로, 컴퓨터의 ‘두뇌’라고 할 수 있습니다. CPU는 메모리로부터 명령어와 데이터를 가져와 처리하며, 이 과정에서 시스템 버스를 활용합니다.2. 주기억장치(Memory)  데이터와 명령어를 일시적으로 저장  프로그램 실행 시 CPU가 빠르게 접근  전원이 꺼지면 정보 손실메모리는 RAM(Random Access Memory)와 ROM(Read Only Memory)가 있습니다. CPU에 의해 처리된 데이터를 일시적으로 저장하는 역할을 하며, CPU가 처리해야 할 데이터와 프로그램의 명령어를 빠르게 접근할 수 있도록 합니다.3. 보조기억장치  데이터의 영구 저장  주기억 장치에 비해 속도가 느림  비용이 저렴보조기억장치는 데이터를 영구적으로 저장하는 공간으로, 전원이 꺼져도 저장된 정보를 유지합니다. 이는 운영 체제, 응용 프로그램 및 사용자 데이터와 같은 중요한 파일을 보관하는 데 사용됩니다. 보조기억장치는 메모리와 달리 데이터 접근 속도는 느리지만, 저장 용량은 훨씬 크고 비용이 저렴합니다.4. 입출력 장치  사용자와 시스템 간 인터페이스 제공  데이터 입력 및 결과 출력  예: 키보드, 마우스, 모니터, 프린터입출력 장치는 사용자와 컴퓨터 시스템 간의 데이터 교환을 가능하게 하며, 예를 들어 키보드와 마우스는 데이터 입력을, 모니터와 프린터는 정보출력을 담당합니다.5. 시스템 버스  컴퓨터 구성요소들 간의 데이터를 전달하기 위한 통로  데이터 버스, 주소 버스, 제어 버스로 구성시스템 버스는 CPU, 메모리, 입출력 장치, 보조기억장치 간의 데이터 전송을 중개하는 중요한 통신 체계입니다. 이 버스는 데이터 버스, 주소 버스, 제어 버스로 구성되어 각각 데이터의 전송, 메모리 주소의 지정, 그리고 데이터 흐름 제어 역할을 합니다."
  }
  
]

